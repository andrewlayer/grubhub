{
  "name": "grubhub",
  "displayName": "Grubhub",
  "description": "A copilot chat extension for VSCode",
  "publisher": "buildwithlayer",
  "repository": {
    "type": "git",
    "url": "https://github.com/andrewlayer/grubhub"},
  "icon": "./icon.png",
  "version": "0.0.1",
  "engines": {
    "vscode": "^1.97.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [],
  "main": "./out/extension.js",
  "contributes": {
    "chatParticipants": [
      {
        "id": "grubhub",
        "fullName": "Grubhub",
        "name": "grubhub",
        "description": "Order food from Grubhub üçî",
        "isSticky": true,
        "disambiguation": [
          {
            "category": "food_ordering",
            "description": "The user wants to order food, browse restaurants, or manage their Grubhub orders.  Start off my listing their favorite restaurants.",
            "examples": [
              "I want to order some food",
              "What restaurants are near me?",
              "Show me the menu for a restaurant",
              "Add a burger to my cart",
              "What's in my shopping cart?",
              "Place my order",
              "I'm hungry",
              "Order lunch",
              "Get me some dinner"
            ]
          }
        ]
      }
    ],
    "languageModelTools": [
      {
        "name": "grubhub-api_add_to_cart",
        "tags": [
          "grubhub"
        ],
        "toolReferenceName": "addToCart",
        "displayName": "Add to Cart",
        "modelDescription": "Add an item to the Grubhub shopping cart",
        "icon": "$(cart)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "cart_id": {
              "type": "string",
              "description": "The ID of the cart to add the item to. If not provided, a new cart will be created."
            },
            "menu_item_id": {
              "type": "string",
              "description": "The ID of the menu item to add"
            },
            "restaurant_id": {
              "type": "string",
              "description": "The ID of the restaurant"
            },
            "quantity": {
              "type": "integer",
              "description": "Number of items to add",
              "default": 1
            },
            "special_instructions": {
              "type": "string",
              "description": "Special instructions for the order",
              "default": ""
            },
            "cost": {
              "type": "number",
              "description": "The cost of the menu item"
            }
          },
          "required": [
            "menu_item_id",
            "restaurant_id",
            "cost"
          ]
        }
      },
      {
        "name": "grubhub-api_get_carts",
        "tags": ["grubhub"],
        "toolReferenceName": "getCarts",
        "displayName": "Get Carts",
        "modelDescription": "Get all Grubhub shopping carts",
        "icon": "$(list-unordered)"
      },
      {
        "name": "grubhub-api_create_cart",
        "tags": ["grubhub"],
        "toolReferenceName": "createCart",
        "displayName": "Create Cart",
        "modelDescription": "Create a new Grubhub shopping cart. ONLY CALL THIS IF THE USER EXPLICITLY ASKS YOU TO CREATE A CART",
        "icon": "$(add)"
      },
      {
        "name": "grubhub-api_get_restaurant_items",
        "tags": ["grubhub"],
        "toolReferenceName": "getRestaurantItems",
        "displayName": "Get Restaurant Items",
        "modelDescription": "Get menu items from a Grubhub restaurant",
        "icon": "$(list-tree)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "restaurant_id": {
              "type": "string",
              "description": "The ID of the restaurant"
            }
          },
          "required": ["restaurant_id"]
        }
      },
      {
        "name": "grubhub-api_update_delivery",
        "tags": ["grubhub"],
        "toolReferenceName": "updateDelivery",
        "displayName": "Update Delivery Info",
        "modelDescription": "Update delivery information for a cart",
        "icon": "$(location)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "cart_id": {
              "type": "string",
              "description": "The ID of the cart"
            },
            "address_lines": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of address lines (e.g. ['110 Hoboken Ave', 'Apt 317'])",
              "minItems": 1,
              "maxItems": 2
            },
            "city": {
              "type": "string",
              "description": "City name"
            },
            "state": {
              "type": "string",
              "description": "Two-letter state code",
              "pattern": "^[A-Z]{2}$"
            },
            "zip": {
              "type": "string",
              "description": "5-digit ZIP code",
              "pattern": "^\\d{5}$"
            }
          },
          "required": ["cart_id", "address_lines", "city", "state", "zip"]
        }
      },
      {
        "name": "grubhub-api_get_bill",
        "tags": ["grubhub"],
        "toolReferenceName": "getBill",
        "displayName": "Get Bill",
        "modelDescription": "Get the bill details for a cart.  Output the status of the order, if it is ready or not",
        "icon": "$(credit-card)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "cart_id": {
              "type": "string",
              "description": "The ID of the cart"
            }
          },
          "required": ["cart_id"]
        }
      },
      {
        "name": "grubhub-api_list_restaurants",
        "tags": ["grubhub"],
        "toolReferenceName": "listRestaurants",
        "displayName": "List Restaurants",
        "modelDescription": "List your favorite Grubhub restaurants",
        "icon": "$(list-flat)"
      },
      {
        "name": "grubhub-api_checkout_cart",
        "tags": ["grubhub"],
        "toolReferenceName": "checkoutCart",
        "displayName": "Checkout Cart",
        "modelDescription": "Complete the order and checkout the cart",
        "icon": "$(check)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "cart_id": {
              "type": "string",
              "description": "The ID of the cart to checkout"
            }
          },
          "required": ["cart_id"]
        }
      },
      {
        "name": "grubhub-api_delete_cart",
        "tags": ["grubhub"],
        "toolReferenceName": "deleteCart",
        "displayName": "Delete Cart",
        "modelDescription": "Delete a Grubhub shopping cart",
        "icon": "$(trash)",
        "inputSchema": {
          "type": "object",
          "properties": {
            "cart_id": {
              "type": "string",
              "description": "The ID of the cart to delete"
            }
          },
          "required": ["cart_id"]
        }
      }
    ],
    "configuration": {
      "title": "Grubhub",
      "properties": {
        "grubhub.bearerToken": {
          "type": "string",
          "default": "",
          "description": "Required: Grubhub API Bearer Token"
        },
        "grubhub.address": {
          "type": "string",
          "default": "",
          "description": "Required: Your delivery address. We use OpenStreetMap for geocoding - you can verify your address works at https://nominatim.openstreetmap.org/ui/ (e.g. '510 Willus Ave Denmount NJ')"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "yarn run compile && yarn run lint",
    "lint": "eslint src --ext ts",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.6",
    "@types/node": "18.x",
    "@types/vscode": "^1.97.0",
    "@typescript-eslint/eslint-plugin": "^6.19.1",
    "@typescript-eslint/parser": "^6.19.1",
    "@vscode/test-cli": "^0.0.4",
    "@vscode/test-electron": "^2.3.9",
    "eslint": "^8.56.0",
    "typescript": "^5.3.3"
  },
  "dependencies": {
    "@vscode/chat-extension-utils": "^0.0.0-alpha.5"
  }
}
